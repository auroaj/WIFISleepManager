name: Build WiFi Sleep Manager

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  APP_NAME: WiFiSleepManager

jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
        else
          echo "version=dev-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        fi

    - name: Update version in project
      run: |
        sed -i '' "s/MARKETING_VERSION = 1.0;/MARKETING_VERSION = ${{ steps.version.outputs.version }};/g" ${{ env.APP_NAME }}.xcodeproj/project.pbxproj

    - name: Create export options
      run: |
        cat > exportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>method</key>
          <string>mac-application</string>
          <key>destination</key>
          <string>export</string>
        </dict>
        </plist>
        EOF

    - name: Build archive
      run: |
        xcodebuild archive \
          -project ${{ env.APP_NAME }}.xcodeproj \
          -scheme ${{ env.APP_NAME }} \
          -configuration Release \
          -archivePath ${{ env.APP_NAME }}.xcarchive

    - name: Export app
      run: |
        xcodebuild -exportArchive \
          -archivePath ${{ env.APP_NAME }}.xcarchive \
          -exportPath ./export \
          -exportOptionsPlist exportOptions.plist

    - name: Create DMG
      run: |
        hdiutil create -volname "${{ env.APP_NAME }} ${{ steps.version.outputs.version }}" \
          -srcfolder ./export/${{ env.APP_NAME }}.app \
          -ov -format UDZO \
          ${{ env.APP_NAME }}-${{ steps.version.outputs.version }}.dmg

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-${{ steps.version.outputs.version }}
        path: ${{ env.APP_NAME }}-${{ steps.version.outputs.version }}.dmg

    - name: Upload to release
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ env.APP_NAME }}-${{ steps.version.outputs.version }}.dmg
        asset_name: ${{ env.APP_NAME }}-${{ steps.version.outputs.version }}.dmg
        asset_content_type: application/octet-stream
